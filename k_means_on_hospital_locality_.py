# -*- coding: utf-8 -*-
"""k-means on hospital locality .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uMG1n-l4N2sf-PH7KU9XSn1W1IzTUCtv
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

df=pd.read_csv('/content/HOSPITALS (2).csv')

df.head()

df.tail()

df.info()

df.shape

df.size

df.isnull().sum()

df['HOSPITAL NAME'].fillna('null')

DF=df['AREA'].unique()
len(DF)

DF=df['PINCODE'].unique()
len(DF)

DF=df['UC-X'].unique()
len(DF)

DF=df['UC-Y'].unique()
len(DF)

plt.scatter(df['RATING'],df['UC-Y'])
plt.show

DF=df['SPECIALITY'].unique()
len(DF)

DF=df['ONLINE APPOINTMENT'].unique()
len(DF)

DF=df['RATING'].unique()
len(DF)

H=pd.crosstab(df['AREA'],df['SPECIALITY'])
H

L=pd.crosstab(df['AREA'],df['RATING'])
L

K=pd.merge(H,L,on='AREA')
K

Y=['HOSPITAL NAME','AREA','SPECIALITY','PINCODE']
from sklearn.preprocessing import LabelEncoder
LE=LabelEncoder()
df[Y]=df[Y].apply(LE.fit_transform)

S= df.iloc[:,1:-4]
S

sns.pairplot(S)

fig, ax = plt.subplots(figsize=(8,8)) 
sns.heatmap(S.corr(), cmap="YlGnBu", annot=True, ax=ax)

from sklearn.cluster import KMeans
kmeans=KMeans(n_clusters=5,random_state=0)
kmeans.fit(S)
kmeans.cluster_centers_

print(kmeans.inertia_)           #HOW WELL THE DATASET IS CLUSTERED

kmeans=KMeans(5)
kmeans.fit(S)
Z_kmeans=kmeans.fit_predict(S)
Z_kmeans
plt.scatter(S['AREA'],S['SPECIALITY'],c=Z_kmeans,s=50,cmap='rainbow')

wcss=[]
for i in range(1,10):
  kmeans=KMeans(i)
  kmeans.fit(S)
  wcss_iter = kmeans.inertia_
  wcss.append(wcss_iter)

number_clusters = range(1,10)
plt.plot(number_clusters,wcss)
plt.title('The Elbow title')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')

from sklearn.cluster import KMeans
kmeans=KMeans(n_clusters=2,random_state=0)
kmeans.fit(S)
kmeans.cluster_centers_

print(kmeans.inertia_)

kmeans=KMeans(2)
kmeans.fit(S)
Z_kmeans=kmeans.fit_predict(S)
Z_kmeans
plt.scatter(S['AREA'],S['SPECIALITY'],c=Z_kmeans,s=50,cmap='rainbow')

from sklearn.preprocessing import StandardScaler           #STANDARDIZING THE VALUES
scaler = StandardScaler()
S= scaler.fit_transform(S)

from sklearn.decomposition import PCA #QUALITY OF CLUSTERING OPERATION #DECOMPOSE MULTIVARIATE DATASET
pca = PCA(2)
S = pca.fit_transform(S)

from sklearn import metrics
kmeans = KMeans(n_clusters = 2, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)
Z_kmeans = kmeans.fit_predict(S)
print('Homogeneity: {}'.format(metrics.homogeneity_score(Z, kmeans.labels_)))
print('Completeness: {}'.format(metrics.completeness_score(Z,kmeans.labels_)))
print('V-measure: {}'.format(metrics.v_measure_score(Z,kmeans.labels_)) )

from sklearn.datasets import make_moons
S,Y = make_moons(150, noise=.05, random_state=0)

from sklearn.cluster import SpectralClustering
model = SpectralClustering(n_clusters=2, affinity='nearest_neighbors',
                           assign_labels='kmeans')
labels = model.fit_predict(S)
plt.scatter(S[:,0], S[:,1], c=labels, s=50, cmap='viridis');